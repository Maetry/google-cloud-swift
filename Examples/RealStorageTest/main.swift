// –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ credentials
import Foundation
import CloudCore
import Storage
import AsyncHTTPClient

@main
struct RealStorageTest {
    
    static func main() async throws {
        print("""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë   üî• –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ GOOGLE CLOUD STORAGE AUTHENTICATION         ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        
        """)
        
        let credPath = "/Users/vshevtsov/Works/Maetry/google-test-credentials.json"
        
        // HTTP Client
        let httpClient = HTTPClient(eventLoopGroupProvider: .singleton)
        defer {
            try? httpClient.syncShutdown()
        }
        
        // ====================================================================
        // –¢–ï–°–¢ 1: –ó–∞–≥—Ä—É–∑–∫–∞ credentials
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 1: –ó–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ JSON —Ñ–∞–π–ª–∞\n")
        
        let resolvedCreds: ResolvedCredentials
        
        do {
            resolvedCreds = try await CredentialsResolver.resolveCredentials(
                strategy: .filePath(credPath, .serviceAccount)
            )
            
            switch resolvedCreds {
            case .serviceAccount(let creds):
                print("   ‚úÖ Service Account credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                print("   üìä –î–µ—Ç–∞–ª–∏:")
                print("      - Type: \(creds.type)")
                print("      - Project ID: \(creds.projectId)")
                print("      - Client Email: \(creds.clientEmail)")
                print("      - Client ID: \(creds.clientId)")
                print("      - Private Key ID: \(creds.privateKeyId)")
                print("      - Token URI: \(creds.tokenUri)")
                print("      - Auth URI: \(creds.authUri)")
                
            default:
                print("   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø credentials")
                throw TestError.unexpectedCredentialType
            }
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ credentials: \(error)")
            throw error
        }
        
        print("\n" + String(repeating: "‚îÄ", count: 64) + "\n")
        
        // ====================================================================
        // –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ Storage –∫–ª–∏–µ–Ω—Ç–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ Storage –∫–ª–∏–µ–Ω—Ç–∞\n")
        
        let storage: GoogleCloudStorageClient
        
        do {
            let startTime = Date()
            
            storage = try await GoogleCloudStorageClient(
                strategy: .filePath(credPath, .serviceAccount),
                client: httpClient,
                scope: [.fullControl]
            )
            
            let duration = Date().timeIntervalSince(startTime)
            
            print("   ‚úÖ Storage –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print("      - –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(String(format: "%.2f", duration))s")
            print("      - Scope: devstorage.full_control")
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: \(error)")
            throw error
        }
        
        print("\n" + String(repeating: "‚îÄ", count: 64) + "\n")
        
        // ====================================================================
        // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–≤—ã–π API –≤—ã–∑–æ–≤
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ (–ø–µ—Ä–≤—ã–π API –≤—ã–∑–æ–≤)\n")
        
        do {
            let startTime = Date()
            
            print("   üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Cloud Storage API...")
            
            // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç:
            // 1. –°–æ–∑–¥–∞–Ω–∏–µ JWT assertion
            // 2. –ü–æ–¥–ø–∏—Å—å JWT –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º (RS256)
            // 3. POST https://oauth2.googleapis.com/token
            // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ access_token
            // 5. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 55 –º–∏–Ω—É—Ç
            // 6. API –≤—ã–∑–æ–≤ –∫ Storage
            
            let buckets = try await storage.buckets.list(
                queryParameters: ["maxResults": "5"]
            )
            
            let duration = Date().timeIntervalSince(startTime)
            
            print("   ‚úÖ OAuth —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
            print("      - –û–±—â–µ–µ –≤—Ä–µ–º—è: \(String(format: "%.2f", duration))s")
            print("      - (–≤–∫–ª—é—á–∞–µ—Ç: JWT sign + OAuth request + Storage API)")
            
            if let items = buckets.items {
                print("\n   üì¶ –ù–∞–π–¥–µ–Ω–æ buckets: \(items.count)")
                for bucket in items.prefix(5) {
                    print("      - \(bucket.name ?? "unnamed")")
                    print("        Location: \(bucket.location ?? "unknown")")
                    print("        Storage Class: \(bucket.storageClass ?? "unknown")")
                    if let created = bucket.timeCreated {
                        print("        Created: \(created)")
                    }
                }
            } else {
                print("\n   ‚ÑπÔ∏è  Buckets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)")
            }
            
        } catch let error as CloudStorageAPIError {
            print("   ‚ùå –û–®–ò–ë–ö–ê Google Cloud Storage API:")
            print("      - HTTP Code: \(error.error.code)")
            print("      - Message: \(error.error.message)")
            
            if !error.error.errors.isEmpty {
                print("      - –î–µ—Ç–∞–ª–∏:")
                for err in error.error.errors {
                    if let reason = err.reason {
                        print("        ‚Ä¢ Reason: \(reason)")
                    }
                    if let message = err.message {
                        print("        ‚Ä¢ Message: \(message)")
                    }
                }
            }
            
            if error.error.code == 403 {
                print("\n   üí° –†–ï–®–ï–ù–ò–ï:")
                print("      Service Account –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ IAM —Ä–æ–ª–∏:")
                print("      gcloud projects add-iam-policy-binding maetry \\")
                print("        --member='serviceAccount:ci-test-bot@maetry.iam.gserviceaccount.com' \\")
                print("        --role='roles/storage.objectViewer'")
            }
            
            throw error
            
        } catch {
            print("   ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: \(error)")
            throw error
        }
        
        print("\n" + String(repeating: "‚îÄ", count: 64) + "\n")
        
        // ====================================================================
        // –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞\n")
        
        do {
            print("   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π API –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω)...")
            
            let startTime = Date()
            let buckets = try await storage.buckets.list(queryParameters: ["maxResults": "1"])
            let duration = Date().timeIntervalSince(startTime)
            
            print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º!")
            print("      - –í—Ä–µ–º—è: \(String(format: "%.2f", duration))s")
            
            if duration < 1.0 {
                print("      - ‚ö° –û–ß–ï–ù–¨ –ë–´–°–¢–†–û! –¢–æ–∫–µ–Ω —Ç–æ—á–Ω–æ –∏–∑ –∫—ç—à–∞!")
                print("      - (OAuth –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è)")
            } else {
                print("      - ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)")
            }
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
        }
        
        print("\n" + String(repeating: "‚îÄ", count: 64) + "\n")
        
        // ====================================================================
        // –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ bucket
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ bucket\n")
        
        let testBucketName = "test-auth-\(UUID().uuidString.prefix(8).lowercased())"
        
        print("   üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π bucket: \(testBucketName)")
        
        do {
            let bucket = try await storage.buckets.insert(
                name: testBucketName,
                location: "US",
                storageClass: .regional
            )
            
            print("   ‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("      - Name: \(bucket.name ?? "")")
            print("      - Location: \(bucket.location ?? "")")
            print("      - Self Link: \(bucket.selfLink ?? "")")
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π bucket
            print("\n   üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ bucket...")
            try await storage.buckets.delete(bucket: testBucketName)
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π bucket —É–¥–∞–ª–µ–Ω")
            
        } catch let error as CloudStorageAPIError {
            if error.error.code == 403 {
                print("   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è bucket")
                print("      –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã")
                print("\n   üí° –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–∑–≤–æ–ª—è—é—Ç:")
                print("      ‚úì –ó–∞–≥—Ä—É–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ buckets")
                print("      ‚úì –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ACL –Ω–∞ –æ–±—ä–µ–∫—Ç—ã")
                print("      ‚úì –£–¥–∞–ª—è—Ç—å –æ–±—ä–µ–∫—Ç—ã")
            } else if error.error.code == 409 {
                print("   ‚ÑπÔ∏è  Bucket —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            } else {
                print("   ‚ùå –û–®–ò–ë–ö–ê: \(error.error.message) (code: \(error.error.code))")
            }
        }
        
        print("\n" + String(repeating: "‚ïê", count: 64) + "\n")
        
        // ====================================================================
        // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
        // ====================================================================
        
        print("""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø                                   ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        
        Service Account: ci-test-bot@maetry.iam.gserviceaccount.com
        Project ID: maetry
        
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ –ü—Ä–æ–≤–µ—Ä–∫–∞                                       ‚îÇ –°—Ç–∞—Ç—É—Å  ‚îÇ
        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
        ‚îÇ ‚úì JSON —Ñ–æ—Ä–º–∞—Ç credentials —Ñ–∞–π–ª–∞                ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç           ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì –°–æ–∑–¥–∞–Ω–∏–µ Storage –∫–ª–∏–µ–Ω—Ç–∞                     ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞                       ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ (list buckets)            ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞                           ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì JWT signing (RS256)                          ‚îÇ   ‚úÖ    ‚îÇ
        ‚îÇ ‚úì OAuth endpoint –∞–∫—Ç—É–∞–ª–µ–Ω                      ‚îÇ   ‚úÖ    ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        
        üéâ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!
        
        –í–∞—à Service Account –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Vapor –ø—Ä–æ–µ–∫—Ç–µ.
        
        üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
        
        1. –í –≤–∞—à–µ–º Vapor –ø—Ä–æ–µ–∫—Ç–µ (configure.swift):
           
           app.googleCloud.credentials = GoogleCloudCredentialsConfiguration(
               credentialsFile: "/path/to/google-test-credentials.json"
           )
           app.googleCloud.storage.configuration = .default()
        
        2. –í routes (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏):
           
           app.post("users", ":id", "avatar") { req async throws in
               let storage = req.gcs
               
               let object = try await storage.object.createSimpleUpload(
                   bucket: "your-bucket-name",
                   data: avatarData,
                   name: "avatars/user-123.jpg",
                   contentType: "image/jpeg"
               )
               
               // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
               try await storage.objectAccessControl.insert(
                   bucket: "your-bucket-name",
                   object: "avatars/user-123.jpg",
                   entity: "allUsers",
                   role: "READER"
               )
               
               return "https://storage.googleapis.com/your-bucket-name/avatars/user-123.jpg"
           }
        
        3. –î–ª—è Cloud Run - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
           
           gcloud run deploy my-app \\
             --service-account ci-test-bot@maetry.iam.gserviceaccount.com
        
        """)
    }
}

enum TestError: Error {
    case unexpectedCredentialType
}

