// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Cloud
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: swift run TestAuth

import Foundation
import CloudCore
import Storage
import AsyncHTTPClient

@main
struct TestAuthentication {
    
    static func main() async throws {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Cloud Storage\n")
        
        let httpClient = HTTPClient(eventLoopGroupProvider: .singleton)
        defer {
            try? httpClient.syncShutdown()
        }
        
        // ====================================================================
        // –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ credentials –∏–∑ —Ñ–∞–π–ª–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 1: –ó–∞–≥—Ä—É–∑–∫–∞ Service Account credentials")
        
        do {
            // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            let credPath = ProcessInfo.processInfo.environment["GOOGLE_APPLICATION_CREDENTIALS"] ?? "./service-account.json"
            
            print("   –ü—É—Ç—å –∫ credentials: \(credPath)")
            
            let resolvedCreds = try await CredentialsResolver.resolveCredentials(
                strategy: .environment
            )
            
            switch resolvedCreds {
            case .serviceAccount(let creds):
                print("   ‚úÖ Service Account credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                print("      - Project ID: \(creds.projectId)")
                print("      - Client Email: \(creds.clientEmail)")
                print("      - Private Key ID: \(creds.privateKeyId)")
                print("      - Token URI: \(creds.tokenUri)")
                
            case .gcloud(let creds):
                print("   ‚úÖ GCloud credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                print("      - Client ID: \(creds.clientId)")
                print("      - Quota Project: \(creds.quotaProjectId)")
                print("      - Type: \(creds.type)")
                
            case .computeEngine(let url):
                print("   ‚úÖ Compute Engine metadata server")
                print("      - URL: \(url)")
            }
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
            print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json")
            throw error
        }
        
        print("")
        
        // ====================================================================
        // –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ Storage –∫–ª–∏–µ–Ω—Ç–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Storage Client")
        
        let storage: GoogleCloudStorageClient
        
        do {
            storage = try await GoogleCloudStorageClient(
                strategy: .environment,
                client: httpClient,
                scope: [.fullControl]
            )
            print("   ‚úÖ Storage client —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
            throw error
        }
        
        print("")
        
        // ====================================================================
        // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞")
        
        do {
            // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            let startTime = Date()
            let buckets = try await storage.buckets.list(queryParameters: ["maxResults": "1"])
            let duration = Date().timeIntervalSince(startTime)
            
            print("   ‚úÖ OAuth —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            print("      - –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: \(String(format: "%.2f", duration))s")
            print("      - Buckets –Ω–∞–π–¥–µ–Ω–æ: \(buckets.items?.count ?? 0)")
            
            if let firstBucket = buckets.items?.first {
                print("      - –ü—Ä–∏–º–µ—Ä bucket: \(firstBucket.name ?? "unnamed")")
            }
            
        } catch let error as CloudStorageAPIError {
            print("   ‚ùå –û–®–ò–ë–ö–ê API: \(error.error.message)")
            print("      - Code: \(error.error.code)")
            if !error.error.errors.isEmpty {
                print("      - Details: \(error.error.errors)")
            }
            
            if error.error.code == 403 {
                print("\n   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IAM —Ä–æ–ª–∏:")
                print("      gcloud projects add-iam-policy-binding PROJECT_ID \\")
                print("        --member='serviceAccount:EMAIL' \\")
                print("        --role='roles/storage.admin'")
            }
            
            throw error
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
            throw error
        }
        
        print("")
        
        // ====================================================================
        // –¢–ï–°–¢ 4: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ —Ç–æ–∫–µ–Ω–∞)
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        
        do {
            let startTime = Date()
            let buckets = try await storage.buckets.list(queryParameters: ["maxResults": "1"])
            let duration = Date().timeIntervalSince(startTime)
            
            print("   ‚úÖ –¢–æ–∫–µ–Ω –∏–∑ –∫—ç—à–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ)")
            print("      - –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: \(String(format: "%.2f", duration))s")
            
            if duration < 0.5 {
                print("      - ‚ö° –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ! –¢–æ–∫–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞")
            }
            
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
            throw error
        }
        
        print("")
        
        // ====================================================================
        // –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        // ====================================================================
        
        print("üìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ bucket)")
        
        do {
            let testBucketName = "test-auth-\(UUID().uuidString.lowercased().prefix(8))"
            
            print("   –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å bucket: \(testBucketName)")
            
            let bucket = try await storage.buckets.insert(
                name: testBucketName,
                location: "US",
                storageClass: .regional
            )
            
            print("   ‚úÖ Bucket —Å–æ–∑–¥–∞–Ω!")
            print("      - Name: \(bucket.name ?? "")")
            print("      - Location: \(bucket.location ?? "")")
            print("      - Storage Class: \(bucket.storageClass ?? "")")
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π bucket
            print("   üßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π bucket...")
            try await storage.buckets.delete(bucket: testBucketName)
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π bucket —É–¥–∞–ª–µ–Ω")
            
        } catch let error as CloudStorageAPIError {
            if error.error.code == 409 {
                print("   ‚ö†Ô∏è  Bucket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
            } else if error.error.code == 403 {
                print("   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                print("      Service Account –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–ª—å:")
                print("      - roles/storage.admin –ò–õ–ò")
                print("      - roles/storage.buckets.create")
            } else {
                print("   ‚ùå –û–®–ò–ë–ö–ê API: \(error.error.message)")
            }
        } catch {
            print("   ‚ùå –û–®–ò–ë–ö–ê: \(error)")
        }
        
        print("")
        
        // ====================================================================
        // –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        // ====================================================================
        
        print("=" * 80)
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!\n")
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Cloud Storage –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Storage API –≤ –≤–∞—à–µ–º Vapor –ø—Ä–æ–µ–∫—Ç–µ.\n")
        
        print("üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤ –≤–∞—à Vapor –ø—Ä–æ–µ–∫—Ç")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ IAM —Ä–æ–ª–∏ –¥–ª—è production service account")
        print("   3. –î–ª—è Cloud Run –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .computeEngine —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        print("   4. –î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("")
    }
}

extension String {
    static func * (lhs: String, rhs: Int) -> String {
        String(repeating: lhs, count: rhs)
    }
}

